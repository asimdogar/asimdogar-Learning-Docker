Doing More With Docker Images


Image creation from a container

$ docker container run -ti ubuntu bash

apt-get update
apt-get install -y figlet
figlet "hello docker"

exit

let us pretend this new figlet application is quite useful and you want to share it with the rest of your team. You could tell them to do exactly what you did above and install figlet in to their own container.
FIGlet is a computer program that generates text banners, in a variety of typefaces, composed of letters made up of conglomerations of smaller ASCII characters (see ASCII art).


docker container ls -a

$ docker container commit CONTAINER_ID

$ docker image ls
$ docker image tag <IMAGE_ID> ourfiglet
$ docker image ls

$ docker container run ourfiglet figlet hello

----------------------------------------------
Image creation using a Dockerfile

Create a web app and run it on Docker

----------index.js--------------
var os = require("os");
var hostname = os.hostname();
console.log("hello from " + hostname);

--------------------------------


-----------Dockerfile-------------

FROM alpine
RUN apk update && apk add nodejs
COPY . /app
WORKDIR /app
CMD ["node","index.js"]

----------------------------------

$ docker image build -t hello:v0.1 .


Image layers

There is something else interesting about the images we build with Docker. When running they appear to be a single OS and application. But the images themselves are actually built in layers.


$ docker image history <image ID>

This is a powerful concept because it means that if we need to make a change to our application, it may only affect a single layer! To see this, we will modify our app a bit and create a new image.

$ echo "console.log(\"this is v0.2\");" >> index.js

$ docker image build -t hello:v0.2 .

Image Inspection

$ docker image pull alpine

Once we are sure it is there let’s inspect it.

$ docker image inspect alpine

There is a lot of information in there:

    the layers the image is composed of
    the driver used to store the layers
    the architecture / OS it has been created for
    metadata of the image

$ docker image inspect --format "{{ json .RootFS.Layers }}" alpine
$ docker image inspect --format "{{ json .RootFS.Layers }}" <image ID>

Our Hello image is a bit more interesting (your sha256 hashes will vary):

["sha256:5bef08742407efd622d243692b79ba0055383bbce12900324f75e56f589aedb0","sha256:5ac283aaea742f843c869d28bbeaf5000c08685b5f7ba01431094a207b8a1df9","sha256:2ecb254be0603a2c76880be45a5c2b028f6208714aec770d49c9eff4cbc3cf25"]

We have three layers in our application. Recall that we had the base Alpine image (the FROM command in our Dockerfile), then we had a RUN command to install some packages, then we had a COPY command to add in our javascript code. 

If someone mistakenly or maliciously changes something in a running container, you can very easily revert back to its original state because the base layers cannot be changed. Or you can simply start a new container instance which will start fresh from your pristine image.

applications that create and store data (databases, for example) can store their data in a special kind of Docker object called a volume, so that data can persist and be shared with other containers.

Terminology

    Layers - A Docker image is built up from a series of layers. Each layer represents an instruction in the image’s Dockerfile. Each layer except the last one is read-only.
    Dockerfile - A text file that contains all the commands, in order, needed to build a given image. The Dockerfile reference page lists the various commands and format details for Dockerfiles.
    Volumes - A special Docker container layer that allows data to persist and be shared separately from the container itself. Think of volumes as a way to abstract and manage your persistent data separately from the application itself.


